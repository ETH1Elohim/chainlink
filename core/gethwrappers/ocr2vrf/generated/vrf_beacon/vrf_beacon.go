// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package vrf_beacon

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

type KeyDataStructKeyData struct {
	PublicKey []byte
	Hashes    [][32]byte
}

type VRFBeaconEnrollmentRequest struct {
	AddressToEnroll common.Address
	PublicKeyBytes  []byte
}

type VRFBeaconEnrollmentResponse struct {
	PlayerIdx                uint8
	Threshold                uint8
	Cipher                   []byte
	EphermeralKeyPubKeyBytes []byte
	Nonce                    []byte
	DistributedPublicKey     []byte
	AccountPointBytes        []byte
	RecoveryPubKeyBytes      []byte
}

type VRFBeaconRecoveryRequest struct {
	PlayerIdx                uint8
	Nonce                    []byte
	DistributedPublicKey     []byte
	Cipher                   []byte
	EphermeralKeyPubKeyBytes []byte
	RecoveryPubKeyBytes      []byte
	Recoverer                common.Address
	AddressToRecover         common.Address
}

type VRFBeaconReportReport struct {
<<<<<<< HEAD
	Outputs           []VRFBeaconTypesVRFOutput
	JuelsPerFeeCoin   *big.Int
	RecentBlockHeight uint64
	RecentBlockHash   [32]byte
}

type VRFBeaconTypesCallback struct {
	RequestID      *big.Int
	NumWords       uint16
	Requester      common.Address
	Arguments      []byte
	SubID          uint64
	GasAllowance   *big.Int
	GasPrice       *big.Int
	WeiPerUnitLink *big.Int
}

type VRFBeaconTypesCostedCallback struct {
	Callback VRFBeaconTypesCallback
	Price    *big.Int
}

type VRFBeaconTypesVRFOutput struct {
	BlockHeight       uint64
	ConfirmationDelay *big.Int
	VrfOutput         ECCArithmeticG1Point
	Callbacks         []VRFBeaconTypesCostedCallback
}

var VRFBeaconMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractLinkTokenInterface\",\"name\":\"link\",\"type\":\"address\"},{\"internalType\":\"contractIVRFCoordinatorProducerAPI\",\"name\":\"coordinator\",\"type\":\"address\"},{\"internalType\":\"contractDKG\",\"name\":\"keyProvider\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"keyID\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"providedHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"onchainHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"blockHeight\",\"type\":\"uint64\"}],\"name\":\"HistoryDomainSeparatorWrong\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"keyProvider\",\"type\":\"address\"}],\"name\":\"KeyInfoMustComeFromProvider\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expectedLength\",\"type\":\"uint256\"}],\"name\":\"OffchainConfigHasWrongLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"occVersion\",\"type\":\"uint64\"}],\"name\":\"UnknownConfigVersion\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contractAccessControllerInterface\",\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contractAccessControllerInterface\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"BillingAccessControllerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"maximumGasPriceGwei\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"reasonableGasPriceGwei\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"observationPaymentGjuels\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"transmissionPaymentGjuels\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"accountingGas\",\"type\":\"uint24\"}],\"name\":\"BillingSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"aggregatorRoundId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"epochAndRound\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint192\",\"name\":\"juelsPerFeeCoin\",\"type\":\"uint192\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"name\":\"NewTransmission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contractLinkTokenInterface\",\"name\":\"linkToken\",\"type\":\"address\"}],\"name\":\"OraclePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposed\",\"type\":\"address\"}],\"name\":\"PayeeshipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"PayeeshipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COORDINATOR\",\"outputs\":[{\"internalType\":\"contractIVRFCoordinatorProducerAPI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LINK\",\"outputs\":[{\"internalType\":\"contractLinkTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUM_CONF_DELAYS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"}],\"name\":\"acceptPayeeship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"blockHeight\",\"type\":\"uint64\"},{\"internalType\":\"VRFBeaconTypes.ConfirmationDelay\",\"name\":\"confirmationDelay\",\"type\":\"uint24\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"p\",\"type\":\"uint256[2]\"}],\"internalType\":\"structECCArithmetic.G1Point\",\"name\":\"vrfOutput\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"VRFBeaconTypes.RequestID\",\"name\":\"requestID\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"numWords\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"arguments\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"subID\",\"type\":\"uint64\"},{\"internalType\":\"uint96\",\"name\":\"gasAllowance\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weiPerUnitLink\",\"type\":\"uint256\"}],\"internalType\":\"structVRFBeaconTypes.Callback\",\"name\":\"callback\",\"type\":\"tuple\"},{\"internalType\":\"uint96\",\"name\":\"price\",\"type\":\"uint96\"}],\"internalType\":\"structVRFBeaconTypes.CostedCallback[]\",\"name\":\"callbacks\",\"type\":\"tuple[]\"}],\"internalType\":\"structVRFBeaconTypes.VRFOutput[]\",\"name\":\"outputs\",\"type\":\"tuple[]\"},{\"internalType\":\"uint192\",\"name\":\"juelsPerFeeCoin\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"recentBlockHeight\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"recentBlockHash\",\"type\":\"bytes32\"}],\"internalType\":\"structVRFBeaconReport.Report\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"exposeType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBilling\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"maximumGasPriceGwei\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"reasonableGasPriceGwei\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"observationPaymentGjuels\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"transmissionPaymentGjuels\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"accountingGas\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBillingAccessController\",\"outputs\":[{\"internalType\":\"contractAccessControllerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"hashes\",\"type\":\"bytes32[]\"}],\"internalType\":\"structKeyDataStruct.KeyData\",\"name\":\"kd\",\"type\":\"tuple\"}],\"name\":\"keyGenerated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDetails\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"configCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDigestAndEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"scanLogs\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkAvailableForPayment\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"availableBalance\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newKeyRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transmitterAddress\",\"type\":\"address\"}],\"name\":\"oracleObservationCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transmitterAddress\",\"type\":\"address\"}],\"name\":\"owedPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_keyID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_provingKeyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"maximumGasPriceGwei\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"reasonableGasPriceGwei\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"observationPaymentGjuels\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"transmissionPaymentGjuels\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"accountingGas\",\"type\":\"uint24\"}],\"name\":\"setBilling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractAccessControllerInterface\",\"name\":\"_billingAccessController\",\"type\":\"address\"}],\"name\":\"setBillingAccessController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"}],\"name\":\"setPayees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposed\",\"type\":\"address\"}],\"name\":\"transferPayeeship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[3]\",\"name\":\"reportContext\",\"type\":\"bytes32[3]\"},{\"internalType\":\"bytes\",\"name\":\"report\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rawVs\",\"type\":\"bytes32\"}],\"name\":\"transmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"}],\"name\":\"withdrawPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60c06040523480156200001157600080fd5b5060405162004741380380620047418339810160408190526200003491620001c7565b8181858581813380600081620000915760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000c457620000c48162000103565b5050506001600160a01b03918216608052811660a052601380546001600160a01b03191695909116949094179093555060145550620002219350505050565b336001600160a01b038216036200015d5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000088565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6001600160a01b0381168114620001c457600080fd5b50565b60008060008060808587031215620001de57600080fd5b8451620001eb81620001ae565b6020860151909450620001fe81620001ae565b60408601519093506200021181620001ae565b6060959095015193969295505050565b60805160a0516144bb620002866000396000818161031201528181611274015281816113500152818161140b01528181612247015281816123fe015281816127da015261305001526000818161023301528181611e27015261247d01526144bb6000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c8063b121e147116100f9578063d09dc33911610097578063e4902f8211610071578063e4902f8214610482578063eb5dcd6c146104aa578063f2fde38b146104bd578063fbffd2c1146104d057600080fd5b8063d09dc3391461045e578063d57fc45a14610466578063e3d0e7121461046f57600080fd5b8063bf2732c7116100d3578063bf2732c71461041e578063c107532914610431578063c4c92b3714610444578063cc31f7dd1461045557600080fd5b8063b121e147146103e7578063b1dc65a4146103fa578063b997cd0f1461040d57600080fd5b8063643dc105116101665780638ac28d5a116101405780638ac28d5a146103865780638da5cb5b146103995780639c849b30146103aa578063afcb95d7146103bd57600080fd5b8063643dc1051461033e57806379ba50971461035157806381ff70481461035957600080fd5b806329937268116101a2578063299372681461026d5780632f7527cc146102f35780633b2bcbf11461030d57806355e487491461033457600080fd5b80630eafb25b146101c9578063181f5a77146101ef5780631b6b6d231461022e575b600080fd5b6101dc6101d73660046131c5565b6104e3565b6040519081526020015b60405180910390f35b604080518082018252601581527f565246426561636f6e20312e302e302d616c7068610000000000000000000000602082015290516101e6919061323a565b6102557f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101e6565b6102b76002546a0100000000000000000000810463ffffffff90811692600160701b8304821692600160901b8104831692600160b01b82041691600160d01b90910462ffffff1690565b6040805163ffffffff9687168152948616602086015292851692840192909252909216606082015262ffffff909116608082015260a0016101e6565b6102fb600881565b60405160ff90911681526020016101e6565b6102557f000000000000000000000000000000000000000000000000000000000000000081565b61033c6105eb565b005b61033c61034c366004613277565b610635565b61033c610893565b600354600554604080516000815264010000000090930463ffffffff1660208401528201526060016101e6565b61033c6103943660046131c5565b610944565b6000546001600160a01b0316610255565b61033c6103b836600461332c565b6109b6565b6005546007546040805160008152602081019390935263ffffffff909116908201526060016101e6565b61033c6103f53660046131c5565b610b94565b61033c6104083660046133da565b610c70565b61033c61041b366004613491565b50565b61033c61042c36600461365d565b611120565b61033c61043f36600461372a565b61118e565b6012546001600160a01b0316610255565b6101dc60145481565b6101dc611406565b6101dc60155481565b61033c61047d366004613788565b6114aa565b6104956104903660046131c5565b611c01565b60405163ffffffff90911681526020016101e6565b61033c6104b8366004613876565b611cba565b61033c6104cb3660046131c5565b611df3565b61033c6104de3660046131c5565b611e04565b6001600160a01b03811660009081526008602090815260408083208151606081018352905460ff80821615158084526101008304909116948301949094526201000090046001600160601b031691810191909152906105455750600092915050565b6002546020820151600091600160901b900463ffffffff1690600c9060ff16601f8110610574576105746138af565b6008810491909101546002546105aa926007166004026101000a90910463ffffffff9081169166010000000000009004166138db565b63ffffffff166105ba9190613900565b6105c890633b9aca00613900565b905081604001516001600160601b0316816105e3919061391f565b949350505050565b6013546001600160a01b031633811461062d5760405163292f4fb560e01b81523360048201526001600160a01b03821660248201526044015b60405180910390fd5b506000601555565b6012546001600160a01b03166106536000546001600160a01b031690565b6001600160a01b0316336001600160a01b031614806106df5750604051630d629b5f60e31b81526001600160a01b03821690636b14daf89061069e9033906000903690600401613960565b602060405180830381865afa1580156106bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106df9190613983565b61072b5760405162461bcd60e51b815260206004820181905260248201527f4f6e6c79206f776e65722662696c6c696e6741646d696e2063616e2063616c6c6044820152606401610624565b610733611e15565b600280547fffffffffffffffffffffffffffff0000000000000000ffffffffffffffffffff166a010000000000000000000063ffffffff8981169182027fffffffffffffffffffffffffffff00000000ffffffffffffffffffffffffffff1692909217600160701b898416908102919091177fffffffffffff0000000000000000ffffffffffffffffffffffffffffffffffff16600160901b8985169081027fffffffffffff00000000ffffffffffffffffffffffffffffffffffffffffffff1691909117600160b01b948916948502177fffffff000000ffffffffffffffffffffffffffffffffffffffffffffffffffff16600160d01b62ffffff89169081029190911790955560408051938452602084019290925290820152606081019190915260808101919091527f0bf184bf1bba9699114bdceddaf338a1b364252c5e497cc01918dde92031713f9060a00160405180910390a1505050505050565b6001546001600160a01b031633146108ed5760405162461bcd60e51b815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e6572000000000000000000006044820152606401610624565b60008054336001600160a01b0319808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b6001600160a01b038181166000908152601060205260409020541633146109ad5760405162461bcd60e51b815260206004820152601760248201527f4f6e6c792070617965652063616e2077697468647261770000000000000000006044820152606401610624565b61041b816122ba565b6109be6124f8565b828114610a0d5760405162461bcd60e51b815260206004820181905260248201527f7472616e736d6974746572732e73697a6520213d207061796565732e73697a656044820152606401610624565b60005b83811015610b8d576000858583818110610a2c57610a2c6138af565b9050602002016020810190610a4191906131c5565b90506000848484818110610a5757610a576138af565b9050602002016020810190610a6c91906131c5565b6001600160a01b038084166000908152601060205260409020549192501680158080610aa95750826001600160a01b0316826001600160a01b0316145b610af55760405162461bcd60e51b815260206004820152601160248201527f706179656520616c7265616479207365740000000000000000000000000000006044820152606401610624565b6001600160a01b03848116600090815260106020526040902080546001600160a01b03191685831690811790915590831614610b7657826001600160a01b0316826001600160a01b0316856001600160a01b03167f78af32efdcad432315431e9b03d27e6cd98fb79c405fdc5af7c1714d9c0f75b360405160405180910390a45b505050508080610b85906139a5565b915050610a10565b5050505050565b6001600160a01b03818116600090815260116020526040902054163314610bfd5760405162461bcd60e51b815260206004820152601f60248201527f6f6e6c792070726f706f736564207061796565732063616e20616363657074006044820152606401610624565b6001600160a01b0381811660008181526010602090815260408083208054336001600160a01b031980831682179093556011909452828520805490921690915590519416939092849290917f78af32efdcad432315431e9b03d27e6cd98fb79c405fdc5af7c1714d9c0f75b39190a45050565b60005a60408051610100808201835260025460ff808216845291810464ffffffffff166020808501919091526601000000000000820463ffffffff908116858701526a0100000000000000000000830481166060860152600160701b830481166080860152600160901b8304811660a0860152600160b01b83041660c0850152600160d01b90910462ffffff1660e08401523360009081526008825293909320549394509092918c01359116610d685760405162461bcd60e51b815260206004820152601860248201527f756e617574686f72697a6564207472616e736d697474657200000000000000006044820152606401610624565b6005548b3514610dba5760405162461bcd60e51b815260206004820152601560248201527f636f6e666967446967657374206d69736d6174636800000000000000000000006044820152606401610624565b610dc88a8a8a8a8a8a612554565b8151610dd59060016139be565b60ff168714610e265760405162461bcd60e51b815260206004820152601a60248201527f77726f6e67206e756d626572206f66207369676e6174757265730000000000006044820152606401610624565b868514610e755760405162461bcd60e51b815260206004820152601e60248201527f7369676e617475726573206f7574206f6620726567697374726174696f6e00006044820152606401610624565b60008a8a604051610e879291906139e3565b604051908190038120610e9e918e906020016139f3565b60408051601f19818403018152828252805160209182012083830190925260008084529083018190529092509060005b8a8110156110445760006001858a8460208110610eed57610eed6138af565b610efa91901a601b6139be565b8f8f86818110610f0c57610f0c6138af565b905060200201358e8e87818110610f2557610f256138af565b9050602002013560405160008152602001604052604051610f62949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015610f84573d6000803e3d6000fd5b505060408051601f198101516001600160a01b03811660009081526009602090815290849020838501909452925460ff808216151580855261010090920416938301939093529095509250905061101d5760405162461bcd60e51b815260206004820152600f60248201527f7369676e6174757265206572726f7200000000000000000000000000000000006044820152606401610624565b826020015160080260ff166001901b8401935050808061103c906139a5565b915050610ece565b5081827e0101010101010101010101010101010101010101010101010101010101010116146110b55760405162461bcd60e51b815260206004820152601060248201527f6475706c6963617465207369676e6572000000000000000000000000000000006044820152606401610624565b50600091506111049050838d836020020135848e8e8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506125e892505050565b905061111283828633612907565b505050505050505050505050565b6013546001600160a01b031633811461115d5760405163292f4fb560e01b81523360048201526001600160a01b0382166024820152604401610624565b815160405161116f9190602001613a0f565b60408051601f1981840301815291905280516020909101206015555050565b6000546001600160a01b03163314806112185750601254604051630d629b5f60e31b81526001600160a01b0390911690636b14daf8906111d79033906000903690600401613960565b602060405180830381865afa1580156111f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112189190613983565b6112645760405162461bcd60e51b815260206004820181905260248201527f4f6e6c79206f776e65722662696c6c696e6741646d696e2063616e2063616c6c6044820152606401610624565b600061126e612a1c565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166345ccbb8b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f49190613a2b565b9050818110156113465760405162461bcd60e51b815260206004820152601460248201527f696e73756666696369656e742062616c616e63650000000000000000000000006044820152606401610624565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663f99b1d68856113896113838686613a44565b87612be9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b03909216600483015260248201526044015b600060405180830381600087803b1580156113e857600080fd5b505af11580156113fc573d6000803e3d6000fd5b5050505050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166345ccbb8b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611467573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148b9190613a2b565b90506000611497612a1c565b90506114a38183613a5b565b9250505090565b6114b26124f8565b601f8911156115035760405162461bcd60e51b815260206004820152601060248201527f746f6f206d616e79206f7261636c6573000000000000000000000000000000006044820152606401610624565b8887146115525760405162461bcd60e51b815260206004820152601660248201527f6f7261636c65206c656e677468206d69736d61746368000000000000000000006044820152606401610624565b8861155e876003613acf565b60ff16106115ae5760405162461bcd60e51b815260206004820152601860248201527f6661756c74792d6f7261636c65206620746f6f206869676800000000000000006044820152606401610624565b6115ba8660ff16612c03565b6040805160e060208c02808301820190935260c082018c815260009383928f918f918291908601908490808284376000920191909152505050908252506040805160208c810282810182019093528c82529283019290918d918d91829185019084908082843760009201919091525050509082525060ff891660208083019190915260408051601f8a01839004830281018301825289815292019190899089908190840183828082843760009201919091525050509082525067ffffffffffffffff861660208083019190915260408051601f8701839004830281018301825286815292019190869086908190840183828082843760009201919091525050509152506002805465ffffffffff001916905590506116d6611e15565b600a5460005b81811015611787576000600a82815481106116f9576116f96138af565b6000918252602082200154600b80546001600160a01b0390921693509084908110611726576117266138af565b60009182526020808320909101546001600160a01b039485168352600982526040808420805461ffff1916905594168252600890529190912080546dffffffffffffffffffffffffffff19169055508061177f816139a5565b9150506116dc565b50611794600a6000613085565b6117a0600b6000613085565b60005b825151811015611a1e5760096000846000015183815181106117c7576117c76138af565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff161561183b5760405162461bcd60e51b815260206004820152601760248201527f7265706561746564207369676e657220616464726573730000000000000000006044820152606401610624565b604080518082019091526001815260ff82166020820152835180516009916000918590811061186c5761186c6138af565b6020908102919091018101516001600160a01b03168252818101929092526040016000908120835181549484015161ffff1990951690151561ff0019161761010060ff909516949094029390931790925584015180516008929190849081106118d7576118d76138af565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff161561194b5760405162461bcd60e51b815260206004820152601c60248201527f7265706561746564207472616e736d69747465722061646472657373000000006044820152606401610624565b60405180606001604052806001151581526020018260ff16815260200160006001600160601b03168152506008600085602001518481518110611990576119906138af565b6020908102919091018101516001600160a01b03168252818101929092526040908101600020835181549385015194909201516001600160601b031662010000026dffffffffffffffffffffffff00001960ff959095166101000261ff00199315159390931661ffff1990941693909317919091179290921617905580611a16816139a5565b9150506117a3565b5081518051611a3591600a916020909101906130a3565b506020808301518051611a4c92600b9201906130a3565b5060408201516002805460ff191660ff909216919091179055600354640100000000900463ffffffff16611a7e612c53565b6003805463ffffffff9283166401000000000267ffffffff000000001982168117909255600092611ab59281169116176001613af8565b905080600360006101000a81548163ffffffff021916908363ffffffff1602179055506000611b0946308463ffffffff16886000015189602001518a604001518b606001518c608001518d60a00151612cdd565b9050806005600001819055507f1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e05838284886000015189602001518a604001518b606001518c608001518d60a00151604051611b6c99989796959493929190613b64565b60405180910390a16002546601000000000000900463ffffffff1660005b865151811015611be45781600c82601f8110611ba857611ba86138af565b600891828204019190066004026101000a81548163ffffffff021916908363ffffffff1602179055508080611bdc906139a5565b915050611b8a565b50611bef8b8b612d6a565b50505050505050505050505050505050565b6001600160a01b03811660009081526008602090815260408083208151606081018352905460ff80821615158084526101008304909116948301949094526201000090046001600160601b03169181019190915290611c635750600092915050565b600c816020015160ff16601f8110611c7d57611c7d6138af565b600881049190910154600254611cb3926007166004026101000a90910463ffffffff9081169166010000000000009004166138db565b9392505050565b6001600160a01b03828116600090815260106020526040902054163314611d235760405162461bcd60e51b815260206004820152601d60248201527f6f6e6c792063757272656e742070617965652063616e207570646174650000006044820152606401610624565b6001600160a01b0381163303611d7b5760405162461bcd60e51b815260206004820152601760248201527f63616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610624565b6001600160a01b03808316600090815260116020526040902080548383166001600160a01b031982168117909255909116908114611dee576040516001600160a01b038084169133918616907f84f7c7c80bb8ed2279b4aab5f61cd05e6374073d38f46d7f32de8c30e9e3836790600090a45b505050565b611dfb6124f8565b61041b81612d78565b611e0c6124f8565b61041b81612e21565b600254604080516103e08101918290527f0000000000000000000000000000000000000000000000000000000000000000926601000000000000900463ffffffff169160009190600c90601f908285855b82829054906101000a900463ffffffff1663ffffffff1681526020019060040190602082600301049283019260010382029150808411611e66579050505050505090506000600b805480602002602001604051908101604052809291908181526020018280548015611f0157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611ee3575b5050505050905060008151905060008167ffffffffffffffff811115611f2957611f296134cc565b604051908082528060200260200182016040528015611f52578160200160208202803683370190505b50905060008267ffffffffffffffff811115611f7057611f706134cc565b604051908082528060200260200182016040528015611f99578160200160208202803683370190505b50905060005b8381101561220157600060086000878481518110611fbf57611fbf6138af565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060000160029054906101000a90046001600160601b03166001600160601b03169050600060086000888581518110612021576120216138af565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060000160026101000a8154816001600160601b0302191690836001600160601b0316021790555060008783601f8110612084576120846138af565b6020020151600254908a0363ffffffff9081169250600160901b909104168102633b9aca0002820180156121f6576000601060008a87815181106120ca576120ca6138af565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a90046001600160a01b031690508087868151811061211b5761211b6138af565b60200260200101906001600160a01b031690816001600160a01b0316815250508186868151811061214e5761214e6138af565b6020026020010181815250508a8a86601f811061216d5761216d6138af565b602002019063ffffffff16908163ffffffff16815250508b6001600160a01b0316816001600160a01b03168a87815181106121aa576121aa6138af565b60200260200101516001600160a01b03167fd0b1dac935d85bd54cf0a33b0d41d39f8cf53a968465fc7ea2377526b8ac712c856040516121ec91815260200190565b60405180910390a4505b505050600101611f9f565b5061220f600c86601f613108565b508051156122b1576040517f73433a2f0000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906373433a2f9061227e9085908590600401613bfa565b600060405180830381600087803b15801561229857600080fd5b505af11580156122ac573d6000803e3d6000fd5b505050505b50505050505050565b6001600160a01b0381166000908152600860209081526040918290208251606081018452905460ff80821615158084526101008304909116938301939093526201000090046001600160601b031692810192909252612317575050565b6000612322836104e3565b90508015611dee576001600160a01b0383811660009081526010602090815260409091205460025491850151921691660100000000000090910463ffffffff1690600c9060ff16601f8110612379576123796138af565b6008808204909201805463ffffffff9485166004600790941684026101000a90810295021916939093179092556001600160a01b03808716600090815260209290925260409182902080546dffffffffffffffffffffffff00001916905590517ff99b1d680000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000009091169163f99b1d68916124499185918791016001600160a01b03929092168252602082015260400190565b600060405180830381600087803b15801561246357600080fd5b505af1158015612477573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316856001600160a01b03167fd0b1dac935d85bd54cf0a33b0d41d39f8cf53a968465fc7ea2377526b8ac712c856040516124ea91815260200190565b60405180910390a450505050565b6000546001600160a01b031633146125525760405162461bcd60e51b815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e6572000000000000000000006044820152606401610624565b565b6000612561826020613900565b61256c856020613900565b6125788861014461391f565b612582919061391f565b61258c919061391f565b61259790600061391f565b90503681146122b15760405162461bcd60e51b815260206004820152601860248201527f63616c6c64617461206c656e677468206d69736d6174636800000000000000006044820152606401610624565b600080828060200190518101906125ff9190613e66565b64ffffffffff8516602088015260408701805191925061261e8261403b565b63ffffffff1663ffffffff168152505085600260008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548164ffffffffff021916908364ffffffffff16021790555060408201518160000160066101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001600a6101000a81548163ffffffff021916908363ffffffff160217905550608082015181600001600e6101000a81548163ffffffff021916908363ffffffff16021790555060a08201518160000160126101000a81548163ffffffff021916908363ffffffff16021790555060c08201518160000160166101000a81548163ffffffff021916908363ffffffff16021790555060e082015181600001601a6101000a81548162ffffff021916908362ffffff16021790555090505060006127758260400151612e97565b9050808260600151146127d857606082015160408084015190517faed0afe500000000000000000000000000000000000000000000000000000000815260048101929092526024820183905267ffffffffffffffff166044820152606401610624565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634986b7c583600001518460200151856040015186606001516040518563ffffffff1660e01b815260040161283a9493929190614172565b6000604051808303816000875af1158015612859573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526128819190810190614267565b508464ffffffffff16876040015163ffffffff167f0e21a6118d05811033e5ee111f22acf5ffd1d1406aa2200fe054f29458f8fb263385602001518a6040516128f1939291906001600160a01b039390931683526001600160c01b03919091166020830152604082015260600190565b60405180910390a3506020015195945050505050565b600061292e633b9aca003a04866080015163ffffffff16876060015163ffffffff16612f44565b90506010360260005a905060006129578663ffffffff1685858b60e0015162ffffff1686612f6a565b90506000670de0b6b3a76400006001600160c01b03891683026001600160a01b03881660009081526008602052604090205460c08c01519290910492506201000090046001600160601b039081169163ffffffff16633b9aca0002828401019081168211156129cc5750505050505050612a16565b6001600160a01b038816600090815260086020526040902080546001600160601b0390921662010000026dffffffffffffffffffffffff0000199092169190911790555050505050505b50505050565b600080600b805480602002602001604051908101604052809291908181526020018280548015612a7557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612a57575b50508351600254604080516103e08101918290529697509195660100000000000090910463ffffffff169450600093509150600c90601f908285855b82829054906101000a900463ffffffff1663ffffffff1681526020019060040190602082600301049283019260010382029150808411612ab15790505050505050905060005b83811015612b44578181601f8110612b1157612b116138af565b6020020151612b2090846138db565b612b309063ffffffff168761391f565b955080612b3c816139a5565b915050612af7565b50600254612b6390600160901b900463ffffffff16633b9aca00613900565b612b6d9086613900565b945060005b83811015612be15760086000868381518110612b9057612b906138af565b6020908102919091018101516001600160a01b0316825281019190915260400160002054612bcd906201000090046001600160601b03168761391f565b955080612bd9816139a5565b915050612b72565b505050505090565b600081831015612bfa575081612bfd565b50805b92915050565b8060001061041b5760405162461bcd60e51b815260206004820152601260248201527f66206d75737420626520706f73697469766500000000000000000000000000006044820152606401610624565b60004661a4b1811480612c68575062066eed81145b15612cd65760646001600160a01b031663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612cac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cd09190613a2b565b91505090565b4391505090565b6000808a8a8a8a8a8a8a8a8a604051602001612d0199989796959493929190614343565b60408051601f1981840301815291905280516020909101207dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167e01000000000000000000000000000000000000000000000000000000000000179150509998505050505050505050565b612d748282612fce565b5050565b336001600160a01b03821603612dd05760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610624565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6012546001600160a01b039081169082168114612d7457601280546001600160a01b0319166001600160a01b0384811691821790925560408051928416835260208301919091527f793cb73064f3c8cde7e187ae515511e6e56d1ee89bf08b82fa60fb70f8d48912910160405180910390a15050565b60004661a4b1811480612eac575062066eed81145b15612f34576040517f2b407a8200000000000000000000000000000000000000000000000000000000815267ffffffffffffffff84166004820152606490632b407a8290602401602060405180830381865afa158015612f10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb39190613a2b565b505067ffffffffffffffff164090565b60008383811015612f5757600285850304015b612f618184612be9565b95945050505050565b600081861015612fbc5760405162461bcd60e51b815260206004820181905260248201527f6c6566744761732063616e6e6f742065786365656420696e697469616c4761736044820152606401610624565b50633b9aca0094039190910101020290565b610100818114613010578282826040517fb93aa5de000000000000000000000000000000000000000000000000000000008152600401610624939291906143cb565b600061301e838501856143ef565b90506040517f8eef585f0000000000000000000000000000000000000000000000000000000081526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638eef585f906113ce908490600401614477565b508054600082559060005260206000209081019061041b919061319b565b8280548282559060005260206000209081019282156130f8579160200282015b828111156130f857825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906130c3565b5061310492915061319b565b5090565b6004830191839082156130f85791602002820160005b8382111561316257835183826101000a81548163ffffffff021916908363ffffffff160217905550926020019260040160208160030104928301926001030261311e565b80156131925782816101000a81549063ffffffff0219169055600401602081600301049283019260010302613162565b50506131049291505b5b80821115613104576000815560010161319c565b6001600160a01b038116811461041b57600080fd5b6000602082840312156131d757600080fd5b8135611cb3816131b0565b60005b838110156131fd5781810151838201526020016131e5565b83811115612a165750506000910152565b600081518084526132268160208601602086016131e2565b601f01601f19169290920160200192915050565b602081526000611cb3602083018461320e565b803563ffffffff8116811461326157600080fd5b919050565b62ffffff8116811461041b57600080fd5b600080600080600060a0868803121561328f57600080fd5b6132988661324d565b94506132a66020870161324d565b93506132b46040870161324d565b92506132c26060870161324d565b915060808601356132d281613266565b809150509295509295909350565b60008083601f8401126132f257600080fd5b50813567ffffffffffffffff81111561330a57600080fd5b6020830191508360208260051b850101111561332557600080fd5b9250929050565b6000806000806040858703121561334257600080fd5b843567ffffffffffffffff8082111561335a57600080fd5b613366888389016132e0565b9096509450602087013591508082111561337f57600080fd5b5061338c878288016132e0565b95989497509550505050565b60008083601f8401126133aa57600080fd5b50813567ffffffffffffffff8111156133c257600080fd5b60208301915083602082850101111561332557600080fd5b60008060008060008060008060e0898b0312156133f657600080fd5b606089018a81111561340757600080fd5b8998503567ffffffffffffffff8082111561342157600080fd5b61342d8c838d01613398565b909950975060808b013591508082111561344657600080fd5b6134528c838d016132e0565b909750955060a08b013591508082111561346b57600080fd5b506134788b828c016132e0565b999c989b50969995989497949560c00135949350505050565b6000602082840312156134a357600080fd5b813567ffffffffffffffff8111156134ba57600080fd5b820160808185031215611cb357600080fd5b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715613505576135056134cc565b60405290565b604051610100810167ffffffffffffffff81118282101715613505576135056134cc565b6040516080810167ffffffffffffffff81118282101715613505576135056134cc565b6040516020810167ffffffffffffffff81118282101715613505576135056134cc565b604051601f8201601f1916810167ffffffffffffffff8111828210171561359e5761359e6134cc565b604052919050565b600067ffffffffffffffff8211156135c0576135c06134cc565b50601f01601f191660200190565b600067ffffffffffffffff8211156135e8576135e86134cc565b5060051b60200190565b600082601f83011261360357600080fd5b81356020613618613613836135ce565b613575565b82815260059290921b8401810191818101908684111561363757600080fd5b8286015b84811015613652578035835291830191830161363b565b509695505050505050565b6000602080838503121561367057600080fd5b823567ffffffffffffffff8082111561368857600080fd5b908401906040828703121561369c57600080fd5b6136a46134e2565b8235828111156136b357600080fd5b8301601f810188136136c457600080fd5b80356136d2613613826135a6565b81815289878385010111156136e657600080fd5b81878401888301376000878383010152808452505050838301358281111561370d57600080fd5b613719888286016135f2565b948201949094529695505050505050565b6000806040838503121561373d57600080fd5b8235613748816131b0565b946020939093013593505050565b803560ff8116811461326157600080fd5b67ffffffffffffffff8116811461041b57600080fd5b803561326181613767565b60008060008060008060008060008060c08b8d0312156137a757600080fd5b8a3567ffffffffffffffff808211156137bf57600080fd5b6137cb8e838f016132e0565b909c509a5060208d01359150808211156137e457600080fd5b6137f08e838f016132e0565b909a50985088915061380460408e01613756565b975060608d013591508082111561381a57600080fd5b6138268e838f01613398565b909750955085915061383a60808e0161377d565b945060a08d013591508082111561385057600080fd5b5061385d8d828e01613398565b915080935050809150509295989b9194979a5092959850565b6000806040838503121561388957600080fd5b8235613894816131b0565b915060208301356138a4816131b0565b809150509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600063ffffffff838116908316818110156138f8576138f86138c5565b039392505050565b600081600019048311821515161561391a5761391a6138c5565b500290565b60008219821115613932576139326138c5565b500190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b0384168152604060208201526000612f61604083018486613937565b60006020828403121561399557600080fd5b81518015158114611cb357600080fd5b6000600182016139b7576139b76138c5565b5060010190565b600060ff821660ff84168060ff038211156139db576139db6138c5565b019392505050565b8183823760009101908152919050565b8281526060826020830137600060809190910190815292915050565b60008251613a218184602087016131e2565b9190910192915050565b600060208284031215613a3d57600080fd5b5051919050565b600082821015613a5657613a566138c5565b500390565b6000808312837f800000000000000000000000000000000000000000000000000000000000000001831281151615613a9557613a956138c5565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018313811615613ac957613ac96138c5565b50500390565b600060ff821660ff84168160ff0481118215151615613af057613af06138c5565b029392505050565b600063ffffffff808316818516808303821115613b1757613b176138c5565b01949350505050565b600081518084526020808501945080840160005b83811015613b595781516001600160a01b031687529582019590820190600101613b34565b509495945050505050565b600061012063ffffffff808d1684528b6020850152808b16604085015250806060840152613b948184018a613b20565b90508281036080840152613ba88189613b20565b905060ff871660a084015282810360c0840152613bc5818761320e565b905067ffffffffffffffff851660e0840152828103610100840152613bea818561320e565b9c9b505050505050505050505050565b604081526000613c0d6040830185613b20565b82810360208481019190915284518083528582019282019060005b81811015613c4457845183529383019391830191600101613c28565b5090979650505050505050565b805161326181613767565b805165ffffffffffff8116811461326157600080fd5b805161ffff8116811461326157600080fd5b8051613261816131b0565b600082601f830112613ca057600080fd5b8151613cae613613826135a6565b818152846020838601011115613cc357600080fd5b6105e38260208301602087016131e2565b80516001600160601b038116811461326157600080fd5b600082601f830112613cfc57600080fd5b81516020613d0c613613836135ce565b82815260059290921b84018101918181019086841115613d2b57600080fd5b8286015b8481101561365257805167ffffffffffffffff80821115613d4f57600080fd5b90880190601f196040838c0382011215613d6857600080fd5b613d706134e2565b8784015183811115613d8157600080fd5b8401610100818e0384011215613d9657600080fd5b613d9e61350b565b9250613dab898201613c5c565b8352613db960408201613c72565b89840152613dc960608201613c84565b6040840152608081015184811115613de057600080fd5b613dee8e8b83850101613c8f565b606085015250613e0060a08201613c51565b6080840152613e1160c08201613cd4565b60a084015260e081015160c084015261010081015160e084015250818152613e3b60408501613cd4565b818901528652505050918301918301613d2f565b80516001600160c01b038116811461326157600080fd5b600060208284031215613e7857600080fd5b815167ffffffffffffffff80821115613e9057600080fd5b9083019060808286031215613ea457600080fd5b613eac61352f565b825182811115613ebb57600080fd5b8301601f81018713613ecc57600080fd5b8051613eda613613826135ce565b8082825260208201915060208360051b850101925089831115613efc57600080fd5b602084015b83811015613ffc57805187811115613f1857600080fd5b850160a0818d03601f19011215613f2e57600080fd5b613f3661352f565b6020820151613f4481613767565b81526040820151613f5481613266565b60208201526040828e03605f19011215613f6d57600080fd5b613f75613552565b8d607f840112613f8457600080fd5b613f8c6134e2565b808f60a086011115613f9d57600080fd5b606085015b60a08601811015613fbd578051835260209283019201613fa2565b50825250604082015260a082015189811115613fd857600080fd5b613fe78e602083860101613ceb565b60608301525084525060209283019201613f01565b5084525061400f91505060208401613e4f565b602082015261402060408401613c51565b60408201526060830151606082015280935050505092915050565b600063ffffffff808316818103614054576140546138c5565b6001019392505050565b600081518084526020808501808196508360051b8101915082860160005b8581101561416557828403895281516040815181875265ffffffffffff815116828801528781015160606140b5818a018361ffff169052565b9282015192608091506140d2898301856001600160a01b03169052565b8083015193505061010060a081818b01526140f16101408b018661320e565b9284015192945060c061410f8b82018567ffffffffffffffff169052565b90840151925060e09061412c8b8301856001600160601b03169052565b840151918a01919091529091015161012088015250908601516001600160601b031694860194909452978401979084019060010161407c565b5091979650505050505050565b6000608080830181845280885180835260a092508286019150828160051b8701016020808c016000805b85811015614222578a8503609f190187528251805167ffffffffffffffff1686528481015162ffffff16858701526040808201515190849088015b60028210156141f65782518152918701916001919091019087016141d7565b50505060600151858a0189905261420f868a018261405e565b978501979550509183019160010161419c565b50505081965061423c8189018c6001600160c01b03169052565b505050505050614258604083018567ffffffffffffffff169052565b82606083015295945050505050565b6000602080838503121561427a57600080fd5b825167ffffffffffffffff81111561429157600080fd5b8301601f810185136142a257600080fd5b80516142b0613613826135ce565b81815260079190911b820183019083810190878311156142cf57600080fd5b928401925b8284101561433857608084890312156142ed5760008081fd5b6142f561352f565b845161430081613767565b81528486015161430f81613266565b8187015260408581015190820152606080860151908201528252608090930192908401906142d4565b979650505050505050565b60006101208b83526001600160a01b038b16602084015267ffffffffffffffff808b16604085015281606085015261437d8285018b613b20565b91508382036080850152614391828a613b20565b915060ff881660a085015283820360c08501526143ae828861320e565b90861660e08501528381036101008501529050613bea818561320e565b6040815260006143df604083018587613937565b9050826020830152949350505050565b600061010080838503121561440357600080fd5b83601f84011261441257600080fd5b60405181810181811067ffffffffffffffff82111715614434576144346134cc565b60405290830190808583111561444957600080fd5b845b8381101561446c57803561445e81613266565b82526020918201910161444b565b509095945050505050565b6101008101818360005b60088110156144a557815162ffffff16835260209283019290910190600101614481565b5050509291505056fea164736f6c634300080f000a",
=======
	AccountToRecover common.Address
	Recoverer        common.Address
}

var VRFBeaconMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractDKG\",\"name\":\"keyProvider\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"keyID\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"keyProvider\",\"type\":\"address\"}],\"name\":\"KeyInfoMustComeFromProvider\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expectedLength\",\"type\":\"uint256\"}],\"name\":\"OffchainConfigHasWrongLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"occVersion\",\"type\":\"uint64\"}],\"name\":\"UnknownConfigVersion\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"epochAndRound\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accountToRecover\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recoverer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"name\":\"NewTransmission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NUM_CONF_DELAYS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"accountToRecover\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recoverer\",\"type\":\"address\"}],\"internalType\":\"structVRFBeaconReport.Report\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"exposeType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getEnrollmentResponses\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"playerIdx\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"threshold\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"cipher\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ephermeralKeyPubKeyBytes\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"nonce\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"distributedPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"accountPointBytes\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"recoveryPubKeyBytes\",\"type\":\"bytes\"}],\"internalType\":\"structVRFBeacon.EnrollmentResponse[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMostRecentEnrollmentRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addressToEnroll\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"publicKeyBytes\",\"type\":\"bytes\"}],\"internalType\":\"structVRFBeacon.EnrollmentRequest\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recoverer\",\"type\":\"address\"}],\"name\":\"getRecoveredAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getRecovery\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecoveryRequests\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"playerIdx\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"nonce\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"distributedPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"cipher\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ephermeralKeyPubKeyBytes\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"recoveryPubKeyBytes\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recoverer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addressToRecover\",\"type\":\"address\"}],\"internalType\":\"structVRFBeacon.RecoveryRequest[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"hashes\",\"type\":\"bytes32[]\"}],\"internalType\":\"structKeyDataStruct.KeyData\",\"name\":\"kd\",\"type\":\"tuple\"}],\"name\":\"keyGenerated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDetails\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"configCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDigestAndEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"scanLogs\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newKeyRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"playerIdx\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"threshold\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"cipher\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ephermeralKeyPubKeyBytes\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"nonce\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"distributedPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"accountPointBytes\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"recoveryPubKeyBytes\",\"type\":\"bytes\"}],\"internalType\":\"structVRFBeacon.EnrollmentResponse\",\"name\":\"enrollmentResponse\",\"type\":\"tuple\"}],\"name\":\"postCipher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"playerIdx\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"nonce\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"distributedPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"cipher\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ephermeralKeyPubKeyBytes\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"recoveryPubKeyBytes\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recoverer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addressToRecover\",\"type\":\"address\"}],\"internalType\":\"structVRFBeacon.RecoveryRequest[]\",\"name\":\"recoveryRequests\",\"type\":\"tuple[]\"}],\"name\":\"postRecoveryRequests\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKeyBytes\",\"type\":\"bytes\"}],\"name\":\"requestAccountRecoveryEnrollment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"reset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_keyID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_provingKeyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"answer\",\"type\":\"bytes\"}],\"name\":\"setRecovery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[3]\",\"name\":\"reportContext\",\"type\":\"bytes32[3]\"},{\"internalType\":\"bytes\",\"name\":\"report\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rawVs\",\"type\":\"bytes32\"}],\"name\":\"transmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "",
>>>>>>> aff63a170 (Adjustments for recoverable wallet.)
}

var VRFBeaconABI = VRFBeaconMetaData.ABI

var VRFBeaconBin = VRFBeaconMetaData.Bin

func DeployVRFBeacon(auth *bind.TransactOpts, backend bind.ContractBackend, keyProvider common.Address, keyID [32]byte) (common.Address, *types.Transaction, *VRFBeacon, error) {
	parsed, err := VRFBeaconMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(VRFBeaconBin), backend, keyProvider, keyID)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &VRFBeacon{VRFBeaconCaller: VRFBeaconCaller{contract: contract}, VRFBeaconTransactor: VRFBeaconTransactor{contract: contract}, VRFBeaconFilterer: VRFBeaconFilterer{contract: contract}}, nil
}

type VRFBeacon struct {
	address common.Address
	abi     abi.ABI
	VRFBeaconCaller
	VRFBeaconTransactor
	VRFBeaconFilterer
}

type VRFBeaconCaller struct {
	contract *bind.BoundContract
}

type VRFBeaconTransactor struct {
	contract *bind.BoundContract
}

type VRFBeaconFilterer struct {
	contract *bind.BoundContract
}

type VRFBeaconSession struct {
	Contract     *VRFBeacon
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type VRFBeaconCallerSession struct {
	Contract *VRFBeaconCaller
	CallOpts bind.CallOpts
}

type VRFBeaconTransactorSession struct {
	Contract     *VRFBeaconTransactor
	TransactOpts bind.TransactOpts
}

type VRFBeaconRaw struct {
	Contract *VRFBeacon
}

type VRFBeaconCallerRaw struct {
	Contract *VRFBeaconCaller
}

type VRFBeaconTransactorRaw struct {
	Contract *VRFBeaconTransactor
}

func NewVRFBeacon(address common.Address, backend bind.ContractBackend) (*VRFBeacon, error) {
	abi, err := abi.JSON(strings.NewReader(VRFBeaconABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindVRFBeacon(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &VRFBeacon{address: address, abi: abi, VRFBeaconCaller: VRFBeaconCaller{contract: contract}, VRFBeaconTransactor: VRFBeaconTransactor{contract: contract}, VRFBeaconFilterer: VRFBeaconFilterer{contract: contract}}, nil
}

func NewVRFBeaconCaller(address common.Address, caller bind.ContractCaller) (*VRFBeaconCaller, error) {
	contract, err := bindVRFBeacon(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &VRFBeaconCaller{contract: contract}, nil
}

func NewVRFBeaconTransactor(address common.Address, transactor bind.ContractTransactor) (*VRFBeaconTransactor, error) {
	contract, err := bindVRFBeacon(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &VRFBeaconTransactor{contract: contract}, nil
}

func NewVRFBeaconFilterer(address common.Address, filterer bind.ContractFilterer) (*VRFBeaconFilterer, error) {
	contract, err := bindVRFBeacon(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &VRFBeaconFilterer{contract: contract}, nil
}

func bindVRFBeacon(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(VRFBeaconABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

func (_VRFBeacon *VRFBeaconRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _VRFBeacon.Contract.VRFBeaconCaller.contract.Call(opts, result, method, params...)
}

func (_VRFBeacon *VRFBeaconRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VRFBeacon.Contract.VRFBeaconTransactor.contract.Transfer(opts)
}

func (_VRFBeacon *VRFBeaconRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _VRFBeacon.Contract.VRFBeaconTransactor.contract.Transact(opts, method, params...)
}

func (_VRFBeacon *VRFBeaconCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _VRFBeacon.Contract.contract.Call(opts, result, method, params...)
}

func (_VRFBeacon *VRFBeaconTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VRFBeacon.Contract.contract.Transfer(opts)
}

func (_VRFBeacon *VRFBeaconTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _VRFBeacon.Contract.contract.Transact(opts, method, params...)
}

func (_VRFBeacon *VRFBeaconCaller) NUMCONFDELAYS(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _VRFBeacon.contract.Call(opts, &out, "NUM_CONF_DELAYS")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

func (_VRFBeacon *VRFBeaconSession) NUMCONFDELAYS() (uint8, error) {
	return _VRFBeacon.Contract.NUMCONFDELAYS(&_VRFBeacon.CallOpts)
}

func (_VRFBeacon *VRFBeaconCallerSession) NUMCONFDELAYS() (uint8, error) {
	return _VRFBeacon.Contract.NUMCONFDELAYS(&_VRFBeacon.CallOpts)
}

func (_VRFBeacon *VRFBeaconCaller) GetBalance(opts *bind.CallOpts, addr common.Address) (*big.Int, error) {
	var out []interface{}
	err := _VRFBeacon.contract.Call(opts, &out, "getBalance", addr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_VRFBeacon *VRFBeaconSession) GetBalance(addr common.Address) (*big.Int, error) {
	return _VRFBeacon.Contract.GetBalance(&_VRFBeacon.CallOpts, addr)
}

func (_VRFBeacon *VRFBeaconCallerSession) GetBalance(addr common.Address) (*big.Int, error) {
	return _VRFBeacon.Contract.GetBalance(&_VRFBeacon.CallOpts, addr)
}

func (_VRFBeacon *VRFBeaconCaller) GetEnrollmentResponses(opts *bind.CallOpts, user common.Address) ([]VRFBeaconEnrollmentResponse, error) {
	var out []interface{}
	err := _VRFBeacon.contract.Call(opts, &out, "getEnrollmentResponses", user)

	if err != nil {
		return *new([]VRFBeaconEnrollmentResponse), err
	}

	out0 := *abi.ConvertType(out[0], new([]VRFBeaconEnrollmentResponse)).(*[]VRFBeaconEnrollmentResponse)

	return out0, err

}

func (_VRFBeacon *VRFBeaconSession) GetEnrollmentResponses(user common.Address) ([]VRFBeaconEnrollmentResponse, error) {
	return _VRFBeacon.Contract.GetEnrollmentResponses(&_VRFBeacon.CallOpts, user)
}

func (_VRFBeacon *VRFBeaconCallerSession) GetEnrollmentResponses(user common.Address) ([]VRFBeaconEnrollmentResponse, error) {
	return _VRFBeacon.Contract.GetEnrollmentResponses(&_VRFBeacon.CallOpts, user)
}

func (_VRFBeacon *VRFBeaconCaller) GetMostRecentEnrollmentRequest(opts *bind.CallOpts) (VRFBeaconEnrollmentRequest, error) {
	var out []interface{}
	err := _VRFBeacon.contract.Call(opts, &out, "getMostRecentEnrollmentRequest")

	if err != nil {
		return *new(VRFBeaconEnrollmentRequest), err
	}

	out0 := *abi.ConvertType(out[0], new(VRFBeaconEnrollmentRequest)).(*VRFBeaconEnrollmentRequest)

	return out0, err

}

func (_VRFBeacon *VRFBeaconSession) GetMostRecentEnrollmentRequest() (VRFBeaconEnrollmentRequest, error) {
	return _VRFBeacon.Contract.GetMostRecentEnrollmentRequest(&_VRFBeacon.CallOpts)
}

func (_VRFBeacon *VRFBeaconCallerSession) GetMostRecentEnrollmentRequest() (VRFBeaconEnrollmentRequest, error) {
	return _VRFBeacon.Contract.GetMostRecentEnrollmentRequest(&_VRFBeacon.CallOpts)
}

func (_VRFBeacon *VRFBeaconCaller) GetRecoveredAddress(opts *bind.CallOpts, recoverer common.Address) (common.Address, error) {
	var out []interface{}
	err := _VRFBeacon.contract.Call(opts, &out, "getRecoveredAddress", recoverer)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_VRFBeacon *VRFBeaconSession) GetRecoveredAddress(recoverer common.Address) (common.Address, error) {
	return _VRFBeacon.Contract.GetRecoveredAddress(&_VRFBeacon.CallOpts, recoverer)
}

func (_VRFBeacon *VRFBeaconCallerSession) GetRecoveredAddress(recoverer common.Address) (common.Address, error) {
	return _VRFBeacon.Contract.GetRecoveredAddress(&_VRFBeacon.CallOpts, recoverer)
}

func (_VRFBeacon *VRFBeaconCaller) GetRecovery(opts *bind.CallOpts, user common.Address) ([]byte, error) {
	var out []interface{}
	err := _VRFBeacon.contract.Call(opts, &out, "getRecovery", user)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

func (_VRFBeacon *VRFBeaconSession) GetRecovery(user common.Address) ([]byte, error) {
	return _VRFBeacon.Contract.GetRecovery(&_VRFBeacon.CallOpts, user)
}

func (_VRFBeacon *VRFBeaconCallerSession) GetRecovery(user common.Address) ([]byte, error) {
	return _VRFBeacon.Contract.GetRecovery(&_VRFBeacon.CallOpts, user)
}

func (_VRFBeacon *VRFBeaconCaller) GetRecoveryRequests(opts *bind.CallOpts) ([]VRFBeaconRecoveryRequest, error) {
	var out []interface{}
	err := _VRFBeacon.contract.Call(opts, &out, "getRecoveryRequests")

	if err != nil {
		return *new([]VRFBeaconRecoveryRequest), err
	}

	out0 := *abi.ConvertType(out[0], new([]VRFBeaconRecoveryRequest)).(*[]VRFBeaconRecoveryRequest)

	return out0, err

}

func (_VRFBeacon *VRFBeaconSession) GetRecoveryRequests() ([]VRFBeaconRecoveryRequest, error) {
	return _VRFBeacon.Contract.GetRecoveryRequests(&_VRFBeacon.CallOpts)
}

func (_VRFBeacon *VRFBeaconCallerSession) GetRecoveryRequests() ([]VRFBeaconRecoveryRequest, error) {
	return _VRFBeacon.Contract.GetRecoveryRequests(&_VRFBeacon.CallOpts)
}

func (_VRFBeacon *VRFBeaconCaller) LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

	error) {
	var out []interface{}
	err := _VRFBeacon.contract.Call(opts, &out, "latestConfigDetails")

	outstruct := new(LatestConfigDetails)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ConfigCount = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.BlockNumber = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.ConfigDigest = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

func (_VRFBeacon *VRFBeaconSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _VRFBeacon.Contract.LatestConfigDetails(&_VRFBeacon.CallOpts)
}

func (_VRFBeacon *VRFBeaconCallerSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _VRFBeacon.Contract.LatestConfigDetails(&_VRFBeacon.CallOpts)
}

func (_VRFBeacon *VRFBeaconCaller) LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

	error) {
	var out []interface{}
	err := _VRFBeacon.contract.Call(opts, &out, "latestConfigDigestAndEpoch")

	outstruct := new(LatestConfigDigestAndEpoch)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ScanLogs = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ConfigDigest = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Epoch = *abi.ConvertType(out[2], new(uint32)).(*uint32)

	return *outstruct, err

}

func (_VRFBeacon *VRFBeaconSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _VRFBeacon.Contract.LatestConfigDigestAndEpoch(&_VRFBeacon.CallOpts)
}

func (_VRFBeacon *VRFBeaconCallerSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _VRFBeacon.Contract.LatestConfigDigestAndEpoch(&_VRFBeacon.CallOpts)
}

func (_VRFBeacon *VRFBeaconCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _VRFBeacon.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_VRFBeacon *VRFBeaconSession) Owner() (common.Address, error) {
	return _VRFBeacon.Contract.Owner(&_VRFBeacon.CallOpts)
}

func (_VRFBeacon *VRFBeaconCallerSession) Owner() (common.Address, error) {
	return _VRFBeacon.Contract.Owner(&_VRFBeacon.CallOpts)
}

func (_VRFBeacon *VRFBeaconCaller) SKeyID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _VRFBeacon.contract.Call(opts, &out, "s_keyID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

func (_VRFBeacon *VRFBeaconSession) SKeyID() ([32]byte, error) {
	return _VRFBeacon.Contract.SKeyID(&_VRFBeacon.CallOpts)
}

func (_VRFBeacon *VRFBeaconCallerSession) SKeyID() ([32]byte, error) {
	return _VRFBeacon.Contract.SKeyID(&_VRFBeacon.CallOpts)
}

func (_VRFBeacon *VRFBeaconCaller) SProvingKeyHash(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _VRFBeacon.contract.Call(opts, &out, "s_provingKeyHash")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

func (_VRFBeacon *VRFBeaconSession) SProvingKeyHash() ([32]byte, error) {
	return _VRFBeacon.Contract.SProvingKeyHash(&_VRFBeacon.CallOpts)
}

func (_VRFBeacon *VRFBeaconCallerSession) SProvingKeyHash() ([32]byte, error) {
	return _VRFBeacon.Contract.SProvingKeyHash(&_VRFBeacon.CallOpts)
}

func (_VRFBeacon *VRFBeaconCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _VRFBeacon.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_VRFBeacon *VRFBeaconSession) TypeAndVersion() (string, error) {
	return _VRFBeacon.Contract.TypeAndVersion(&_VRFBeacon.CallOpts)
}

func (_VRFBeacon *VRFBeaconCallerSession) TypeAndVersion() (string, error) {
	return _VRFBeacon.Contract.TypeAndVersion(&_VRFBeacon.CallOpts)
}

func (_VRFBeacon *VRFBeaconTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VRFBeacon.contract.Transact(opts, "acceptOwnership")
}

func (_VRFBeacon *VRFBeaconSession) AcceptOwnership() (*types.Transaction, error) {
	return _VRFBeacon.Contract.AcceptOwnership(&_VRFBeacon.TransactOpts)
}

func (_VRFBeacon *VRFBeaconTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _VRFBeacon.Contract.AcceptOwnership(&_VRFBeacon.TransactOpts)
}

func (_VRFBeacon *VRFBeaconTransactor) Deposit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VRFBeacon.contract.Transact(opts, "deposit")
}

func (_VRFBeacon *VRFBeaconSession) Deposit() (*types.Transaction, error) {
	return _VRFBeacon.Contract.Deposit(&_VRFBeacon.TransactOpts)
}

func (_VRFBeacon *VRFBeaconTransactorSession) Deposit() (*types.Transaction, error) {
	return _VRFBeacon.Contract.Deposit(&_VRFBeacon.TransactOpts)
}

func (_VRFBeacon *VRFBeaconTransactor) ExposeType(opts *bind.TransactOpts, arg0 VRFBeaconReportReport) (*types.Transaction, error) {
	return _VRFBeacon.contract.Transact(opts, "exposeType", arg0)
}

func (_VRFBeacon *VRFBeaconSession) ExposeType(arg0 VRFBeaconReportReport) (*types.Transaction, error) {
	return _VRFBeacon.Contract.ExposeType(&_VRFBeacon.TransactOpts, arg0)
}

func (_VRFBeacon *VRFBeaconTransactorSession) ExposeType(arg0 VRFBeaconReportReport) (*types.Transaction, error) {
	return _VRFBeacon.Contract.ExposeType(&_VRFBeacon.TransactOpts, arg0)
}

func (_VRFBeacon *VRFBeaconTransactor) KeyGenerated(opts *bind.TransactOpts, kd KeyDataStructKeyData) (*types.Transaction, error) {
	return _VRFBeacon.contract.Transact(opts, "keyGenerated", kd)
}

func (_VRFBeacon *VRFBeaconSession) KeyGenerated(kd KeyDataStructKeyData) (*types.Transaction, error) {
	return _VRFBeacon.Contract.KeyGenerated(&_VRFBeacon.TransactOpts, kd)
}

func (_VRFBeacon *VRFBeaconTransactorSession) KeyGenerated(kd KeyDataStructKeyData) (*types.Transaction, error) {
	return _VRFBeacon.Contract.KeyGenerated(&_VRFBeacon.TransactOpts, kd)
}

func (_VRFBeacon *VRFBeaconTransactor) NewKeyRequested(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VRFBeacon.contract.Transact(opts, "newKeyRequested")
}

func (_VRFBeacon *VRFBeaconSession) NewKeyRequested() (*types.Transaction, error) {
	return _VRFBeacon.Contract.NewKeyRequested(&_VRFBeacon.TransactOpts)
}

func (_VRFBeacon *VRFBeaconTransactorSession) NewKeyRequested() (*types.Transaction, error) {
	return _VRFBeacon.Contract.NewKeyRequested(&_VRFBeacon.TransactOpts)
}

func (_VRFBeacon *VRFBeaconTransactor) PostCipher(opts *bind.TransactOpts, user common.Address, enrollmentResponse VRFBeaconEnrollmentResponse) (*types.Transaction, error) {
	return _VRFBeacon.contract.Transact(opts, "postCipher", user, enrollmentResponse)
}

func (_VRFBeacon *VRFBeaconSession) PostCipher(user common.Address, enrollmentResponse VRFBeaconEnrollmentResponse) (*types.Transaction, error) {
	return _VRFBeacon.Contract.PostCipher(&_VRFBeacon.TransactOpts, user, enrollmentResponse)
}

func (_VRFBeacon *VRFBeaconTransactorSession) PostCipher(user common.Address, enrollmentResponse VRFBeaconEnrollmentResponse) (*types.Transaction, error) {
	return _VRFBeacon.Contract.PostCipher(&_VRFBeacon.TransactOpts, user, enrollmentResponse)
}

func (_VRFBeacon *VRFBeaconTransactor) PostRecoveryRequests(opts *bind.TransactOpts, recoveryRequests []VRFBeaconRecoveryRequest) (*types.Transaction, error) {
	return _VRFBeacon.contract.Transact(opts, "postRecoveryRequests", recoveryRequests)
}

func (_VRFBeacon *VRFBeaconSession) PostRecoveryRequests(recoveryRequests []VRFBeaconRecoveryRequest) (*types.Transaction, error) {
	return _VRFBeacon.Contract.PostRecoveryRequests(&_VRFBeacon.TransactOpts, recoveryRequests)
}

func (_VRFBeacon *VRFBeaconTransactorSession) PostRecoveryRequests(recoveryRequests []VRFBeaconRecoveryRequest) (*types.Transaction, error) {
	return _VRFBeacon.Contract.PostRecoveryRequests(&_VRFBeacon.TransactOpts, recoveryRequests)
}

func (_VRFBeacon *VRFBeaconTransactor) RequestAccountRecoveryEnrollment(opts *bind.TransactOpts, publicKeyBytes []byte) (*types.Transaction, error) {
	return _VRFBeacon.contract.Transact(opts, "requestAccountRecoveryEnrollment", publicKeyBytes)
}

func (_VRFBeacon *VRFBeaconSession) RequestAccountRecoveryEnrollment(publicKeyBytes []byte) (*types.Transaction, error) {
	return _VRFBeacon.Contract.RequestAccountRecoveryEnrollment(&_VRFBeacon.TransactOpts, publicKeyBytes)
}

func (_VRFBeacon *VRFBeaconTransactorSession) RequestAccountRecoveryEnrollment(publicKeyBytes []byte) (*types.Transaction, error) {
	return _VRFBeacon.Contract.RequestAccountRecoveryEnrollment(&_VRFBeacon.TransactOpts, publicKeyBytes)
}

func (_VRFBeacon *VRFBeaconTransactor) Reset(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _VRFBeacon.contract.Transact(opts, "reset", addr)
}

func (_VRFBeacon *VRFBeaconSession) Reset(addr common.Address) (*types.Transaction, error) {
	return _VRFBeacon.Contract.Reset(&_VRFBeacon.TransactOpts, addr)
}

func (_VRFBeacon *VRFBeaconTransactorSession) Reset(addr common.Address) (*types.Transaction, error) {
	return _VRFBeacon.Contract.Reset(&_VRFBeacon.TransactOpts, addr)
}

func (_VRFBeacon *VRFBeaconTransactor) SetConfig(opts *bind.TransactOpts, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _VRFBeacon.contract.Transact(opts, "setConfig", signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_VRFBeacon *VRFBeaconSession) SetConfig(signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _VRFBeacon.Contract.SetConfig(&_VRFBeacon.TransactOpts, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_VRFBeacon *VRFBeaconTransactorSession) SetConfig(signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _VRFBeacon.Contract.SetConfig(&_VRFBeacon.TransactOpts, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_VRFBeacon *VRFBeaconTransactor) SetRecovery(opts *bind.TransactOpts, answer []byte) (*types.Transaction, error) {
	return _VRFBeacon.contract.Transact(opts, "setRecovery", answer)
}

func (_VRFBeacon *VRFBeaconSession) SetRecovery(answer []byte) (*types.Transaction, error) {
	return _VRFBeacon.Contract.SetRecovery(&_VRFBeacon.TransactOpts, answer)
}

func (_VRFBeacon *VRFBeaconTransactorSession) SetRecovery(answer []byte) (*types.Transaction, error) {
	return _VRFBeacon.Contract.SetRecovery(&_VRFBeacon.TransactOpts, answer)
}

func (_VRFBeacon *VRFBeaconTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _VRFBeacon.contract.Transact(opts, "transferOwnership", to)
}

func (_VRFBeacon *VRFBeaconSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _VRFBeacon.Contract.TransferOwnership(&_VRFBeacon.TransactOpts, to)
}

func (_VRFBeacon *VRFBeaconTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _VRFBeacon.Contract.TransferOwnership(&_VRFBeacon.TransactOpts, to)
}

func (_VRFBeacon *VRFBeaconTransactor) Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _VRFBeacon.contract.Transact(opts, "transmit", reportContext, report, rs, ss, rawVs)
}

func (_VRFBeacon *VRFBeaconSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _VRFBeacon.Contract.Transmit(&_VRFBeacon.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_VRFBeacon *VRFBeaconTransactorSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _VRFBeacon.Contract.Transmit(&_VRFBeacon.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_VRFBeacon *VRFBeaconTransactor) Withdraw(opts *bind.TransactOpts, addr common.Address, amount *big.Int) (*types.Transaction, error) {
	return _VRFBeacon.contract.Transact(opts, "withdraw", addr, amount)
}

func (_VRFBeacon *VRFBeaconSession) Withdraw(addr common.Address, amount *big.Int) (*types.Transaction, error) {
	return _VRFBeacon.Contract.Withdraw(&_VRFBeacon.TransactOpts, addr, amount)
}

func (_VRFBeacon *VRFBeaconTransactorSession) Withdraw(addr common.Address, amount *big.Int) (*types.Transaction, error) {
	return _VRFBeacon.Contract.Withdraw(&_VRFBeacon.TransactOpts, addr, amount)
}

type VRFBeaconConfigSetIterator struct {
	Event *VRFBeaconConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *VRFBeaconConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VRFBeaconConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(VRFBeaconConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *VRFBeaconConfigSetIterator) Error() error {
	return it.fail
}

func (it *VRFBeaconConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type VRFBeaconConfigSet struct {
	PreviousConfigBlockNumber uint32
	ConfigDigest              [32]byte
	ConfigCount               uint64
	Signers                   []common.Address
	Transmitters              []common.Address
	F                         uint8
	OnchainConfig             []byte
	OffchainConfigVersion     uint64
	OffchainConfig            []byte
	Raw                       types.Log
}

func (_VRFBeacon *VRFBeaconFilterer) FilterConfigSet(opts *bind.FilterOpts) (*VRFBeaconConfigSetIterator, error) {

	logs, sub, err := _VRFBeacon.contract.FilterLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return &VRFBeaconConfigSetIterator{contract: _VRFBeacon.contract, event: "ConfigSet", logs: logs, sub: sub}, nil
}

func (_VRFBeacon *VRFBeaconFilterer) WatchConfigSet(opts *bind.WatchOpts, sink chan<- *VRFBeaconConfigSet) (event.Subscription, error) {

	logs, sub, err := _VRFBeacon.contract.WatchLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(VRFBeaconConfigSet)
				if err := _VRFBeacon.contract.UnpackLog(event, "ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_VRFBeacon *VRFBeaconFilterer) ParseConfigSet(log types.Log) (*VRFBeaconConfigSet, error) {
	event := new(VRFBeaconConfigSet)
	if err := _VRFBeacon.contract.UnpackLog(event, "ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type VRFBeaconNewTransmissionIterator struct {
	Event *VRFBeaconNewTransmission

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *VRFBeaconNewTransmissionIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VRFBeaconNewTransmission)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(VRFBeaconNewTransmission)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *VRFBeaconNewTransmissionIterator) Error() error {
	return it.fail
}

func (it *VRFBeaconNewTransmissionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type VRFBeaconNewTransmission struct {
	EpochAndRound    *big.Int
	Transmitter      common.Address
	AccountToRecover common.Address
	Recoverer        common.Address
	ConfigDigest     [32]byte
	Raw              types.Log
}

func (_VRFBeacon *VRFBeaconFilterer) FilterNewTransmission(opts *bind.FilterOpts, epochAndRound []*big.Int) (*VRFBeaconNewTransmissionIterator, error) {

	var epochAndRoundRule []interface{}
	for _, epochAndRoundItem := range epochAndRound {
		epochAndRoundRule = append(epochAndRoundRule, epochAndRoundItem)
	}

	logs, sub, err := _VRFBeacon.contract.FilterLogs(opts, "NewTransmission", epochAndRoundRule)
	if err != nil {
		return nil, err
	}
	return &VRFBeaconNewTransmissionIterator{contract: _VRFBeacon.contract, event: "NewTransmission", logs: logs, sub: sub}, nil
}

func (_VRFBeacon *VRFBeaconFilterer) WatchNewTransmission(opts *bind.WatchOpts, sink chan<- *VRFBeaconNewTransmission, epochAndRound []*big.Int) (event.Subscription, error) {

	var epochAndRoundRule []interface{}
	for _, epochAndRoundItem := range epochAndRound {
		epochAndRoundRule = append(epochAndRoundRule, epochAndRoundItem)
	}

	logs, sub, err := _VRFBeacon.contract.WatchLogs(opts, "NewTransmission", epochAndRoundRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(VRFBeaconNewTransmission)
				if err := _VRFBeacon.contract.UnpackLog(event, "NewTransmission", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_VRFBeacon *VRFBeaconFilterer) ParseNewTransmission(log types.Log) (*VRFBeaconNewTransmission, error) {
	event := new(VRFBeaconNewTransmission)
	if err := _VRFBeacon.contract.UnpackLog(event, "NewTransmission", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type VRFBeaconOwnershipTransferRequestedIterator struct {
	Event *VRFBeaconOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *VRFBeaconOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VRFBeaconOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(VRFBeaconOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *VRFBeaconOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *VRFBeaconOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type VRFBeaconOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_VRFBeacon *VRFBeaconFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*VRFBeaconOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _VRFBeacon.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &VRFBeaconOwnershipTransferRequestedIterator{contract: _VRFBeacon.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_VRFBeacon *VRFBeaconFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *VRFBeaconOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _VRFBeacon.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(VRFBeaconOwnershipTransferRequested)
				if err := _VRFBeacon.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_VRFBeacon *VRFBeaconFilterer) ParseOwnershipTransferRequested(log types.Log) (*VRFBeaconOwnershipTransferRequested, error) {
	event := new(VRFBeaconOwnershipTransferRequested)
	if err := _VRFBeacon.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type VRFBeaconOwnershipTransferredIterator struct {
	Event *VRFBeaconOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *VRFBeaconOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VRFBeaconOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(VRFBeaconOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *VRFBeaconOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *VRFBeaconOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type VRFBeaconOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_VRFBeacon *VRFBeaconFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*VRFBeaconOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _VRFBeacon.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &VRFBeaconOwnershipTransferredIterator{contract: _VRFBeacon.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_VRFBeacon *VRFBeaconFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *VRFBeaconOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _VRFBeacon.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(VRFBeaconOwnershipTransferred)
				if err := _VRFBeacon.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_VRFBeacon *VRFBeaconFilterer) ParseOwnershipTransferred(log types.Log) (*VRFBeaconOwnershipTransferred, error) {
	event := new(VRFBeaconOwnershipTransferred)
	if err := _VRFBeacon.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type LatestConfigDetails struct {
	ConfigCount  uint32
	BlockNumber  uint32
	ConfigDigest [32]byte
}
type LatestConfigDigestAndEpoch struct {
	ScanLogs     bool
	ConfigDigest [32]byte
	Epoch        uint32
}

func (_VRFBeacon *VRFBeacon) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _VRFBeacon.abi.Events["ConfigSet"].ID:
		return _VRFBeacon.ParseConfigSet(log)
	case _VRFBeacon.abi.Events["NewTransmission"].ID:
		return _VRFBeacon.ParseNewTransmission(log)
	case _VRFBeacon.abi.Events["OwnershipTransferRequested"].ID:
		return _VRFBeacon.ParseOwnershipTransferRequested(log)
	case _VRFBeacon.abi.Events["OwnershipTransferred"].ID:
		return _VRFBeacon.ParseOwnershipTransferred(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (VRFBeaconConfigSet) Topic() common.Hash {
	return common.HexToHash("0x1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e05")
}

func (VRFBeaconNewTransmission) Topic() common.Hash {
	return common.HexToHash("0xfb8260fafd97df85b3771f6532a09a8af1daeac85d6938ee302237174c91a9c9")
}

func (VRFBeaconOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (VRFBeaconOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (_VRFBeacon *VRFBeacon) Address() common.Address {
	return _VRFBeacon.address
}

type VRFBeaconInterface interface {
	NUMCONFDELAYS(opts *bind.CallOpts) (uint8, error)

	GetBalance(opts *bind.CallOpts, addr common.Address) (*big.Int, error)

	GetEnrollmentResponses(opts *bind.CallOpts, user common.Address) ([]VRFBeaconEnrollmentResponse, error)

	GetMostRecentEnrollmentRequest(opts *bind.CallOpts) (VRFBeaconEnrollmentRequest, error)

	GetRecoveredAddress(opts *bind.CallOpts, recoverer common.Address) (common.Address, error)

	GetRecovery(opts *bind.CallOpts, user common.Address) ([]byte, error)

	GetRecoveryRequests(opts *bind.CallOpts) ([]VRFBeaconRecoveryRequest, error)

	LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

		error)

	LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

		error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	SKeyID(opts *bind.CallOpts) ([32]byte, error)

	SProvingKeyHash(opts *bind.CallOpts) ([32]byte, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	Deposit(opts *bind.TransactOpts) (*types.Transaction, error)

	ExposeType(opts *bind.TransactOpts, arg0 VRFBeaconReportReport) (*types.Transaction, error)

	KeyGenerated(opts *bind.TransactOpts, kd KeyDataStructKeyData) (*types.Transaction, error)

	NewKeyRequested(opts *bind.TransactOpts) (*types.Transaction, error)

	PostCipher(opts *bind.TransactOpts, user common.Address, enrollmentResponse VRFBeaconEnrollmentResponse) (*types.Transaction, error)

	PostRecoveryRequests(opts *bind.TransactOpts, recoveryRequests []VRFBeaconRecoveryRequest) (*types.Transaction, error)

	RequestAccountRecoveryEnrollment(opts *bind.TransactOpts, publicKeyBytes []byte) (*types.Transaction, error)

	Reset(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error)

	SetConfig(opts *bind.TransactOpts, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error)

	SetRecovery(opts *bind.TransactOpts, answer []byte) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error)

	Withdraw(opts *bind.TransactOpts, addr common.Address, amount *big.Int) (*types.Transaction, error)

	FilterConfigSet(opts *bind.FilterOpts) (*VRFBeaconConfigSetIterator, error)

	WatchConfigSet(opts *bind.WatchOpts, sink chan<- *VRFBeaconConfigSet) (event.Subscription, error)

	ParseConfigSet(log types.Log) (*VRFBeaconConfigSet, error)

	FilterNewTransmission(opts *bind.FilterOpts, epochAndRound []*big.Int) (*VRFBeaconNewTransmissionIterator, error)

	WatchNewTransmission(opts *bind.WatchOpts, sink chan<- *VRFBeaconNewTransmission, epochAndRound []*big.Int) (event.Subscription, error)

	ParseNewTransmission(log types.Log) (*VRFBeaconNewTransmission, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*VRFBeaconOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *VRFBeaconOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*VRFBeaconOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*VRFBeaconOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *VRFBeaconOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*VRFBeaconOwnershipTransferred, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
